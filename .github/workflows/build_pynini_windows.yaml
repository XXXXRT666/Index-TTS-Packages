name: Build and Release Pynini

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        python-version: ["3.9","3.10", "3.11", "3.12"]

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Clone pynini and openfst
      shell: pwsh
      run: |
        git clone -b "2.1.6-patch" https://github.com/XXXXRT666/pynini-2.1.6.post1.git
        cd pynini-2.1.6.post1/third_party
        git clone https://github.com/XXXXRT666/openfst-1.8.3

    - name: Build OpenFST and Pynini (log to file)
      shell: pwsh
      run: |
        $log = Join-Path $env:GITHUB_WORKSPACE "build_log_py${{ matrix.python-version }}.txt"
        try {
          "=== Start OpenFST Build ===" | Out-File $log
          cd pynini-2.1.6.post1/third_party
          mkdir build
          cd build

          cmake ../openfst-1.8.3 -G "Visual Studio 17 2022" -A x64 "-DCMAKE_INSTALL_PREFIX=../openfst_install" 2>&1 | Tee-Object -Append -FilePath $log | Out-Null
          cmake --build . --config Release --target install 2>&1 | Tee-Object -Append -FilePath $log | Out-Null
          cmake --install . 2>&1 | Tee-Object -Append -FilePath $log | Out-Null

          "=== Start Pynini Build ===" | Tee-Object -Append -FilePath $log | Out-Null
          cd ../..
          python -m build --wheel 2>&1 | Tee-Object -Append -FilePath $log | Out-Null
        }
        catch {
          "Build failed. Check log." | Tee-Object -Append -FilePath $log | Out-Null
          exit 1
        }

    - name: Upload wheel artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: pynini-wheel-py${{ matrix.python-version }}
        path: pynini-2.1.6.post1/dist/*.whl

    - name: Upload build log if failed
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-log-py${{ matrix.python-version }}
        path: build_log_py${{ matrix.python-version }}.txt

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download wheel artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./wheels

    - name: Publish GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: pynini-build-${{ github.run_number }}
        name: Pynini Windows Wheels
        body: |
          Built pynini-2.1.6.post1 wheels for Python 3.9â€“3.12 on Windows.
        files: ./wheels/**/*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
